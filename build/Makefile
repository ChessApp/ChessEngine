
all : main_all

TRACE ?= 0
TRACEON := $(TRACE:0=@)
TRACE_FLAG := $(TRACEON:1=)
DEBUG_MODE ?= 0
TARGET_EXEC ?= chess-all
OUTPUT_DIR ?= 
CODE_DIR ?= code
BUILD_DIR = ~/personal/ChessGame/build
# source file list is auto-generated by the the wrapper ./build.sh script then read in here
SOURCE_FILES_LIST ?= "sourceFiles.list"

ARCH_SPEC :=
CXX := g++

SRCS := $(shell cat $(SOURCE_FILES_LIST))
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)
DEPS := $(OBJS:.o=.d)

ifeq ($(DEBUG_MODE),1) 
	# debug flags
	# C preprocessor flags
	CPPFLAGS := 
	# .cpp flags
	# -I sets the default directory root for all #include paths
	# -g enables debug symbols for use with gdb
	# -D allows a macro to be defined (e.g. -DDEBUG defines the macro DEBUG, which enables the DEBUG_CONSOLE)
	CXXFLAGS := \
		-std=c++11 \
		-I ../code/Source \
		-g \
		-DDEBUG
	# linker flags
	LDLIBS := 
else
	# release flags
	# C preprocessor flags
	CPPFLAGS := 
	# .cpp flags
	# -I sets the default directory root for all #include paths
	CXXFLAGS := \
		-std=c++11 \
		-I ../code/Source
	# linker flags
	LDLIBS := 
endif

# build command for the target executable
$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
	@echo "building $@";
	$(TRACE_FLAG)$(CXX) -Wl,--whole-archive $(OBJS) -Wl,--no-whole-archive -o $@ $(LDLIBS)

# build command for c++ source
$(BUILD_DIR)/%.cpp.o: %.cpp
	@echo "building: $<";
	$(TRACE_FLAG)$(CXX) $(ARCH_SPEC) $(CPPFLAGS) $(CXXFLAGS) $(WARNINGS) -c $< -o $@

.PHONY: clean

main_all: $(OBJS) $(BUILD_DIR)/$(TARGET_EXEC)

clean:
	$(RM) -r $(OUTPUT_DIR)

-include $(DEPS)

